#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TODOList")]
	public partial class TodoListDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttAssignee(tAssignee instance);
    partial void UpdatetAssignee(tAssignee instance);
    partial void DeletetAssignee(tAssignee instance);
    partial void InserttTask(tTask instance);
    partial void UpdatetTask(tTask instance);
    partial void DeletetTask(tTask instance);
    partial void InserttTag(tTag instance);
    partial void UpdatetTag(tTag instance);
    partial void DeletetTag(tTag instance);
    partial void InserttTaskTag(tTaskTag instance);
    partial void UpdatetTaskTag(tTaskTag instance);
    partial void DeletetTaskTag(tTaskTag instance);
    partial void InserttPriority(tPriority instance);
    partial void UpdatetPriority(tPriority instance);
    partial void DeletetPriority(tPriority instance);
    partial void InserttState(tState instance);
    partial void UpdatetState(tState instance);
    partial void DeletetState(tState instance);
    #endregion
		
		public TodoListDataContext() : 
				base(global::DataAccess.Properties.Settings.Default.TODOListConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TodoListDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TodoListDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TodoListDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TodoListDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tAssignee> tAssignees
		{
			get
			{
				return this.GetTable<tAssignee>();
			}
		}
		
		public System.Data.Linq.Table<tTask> tTasks
		{
			get
			{
				return this.GetTable<tTask>();
			}
		}
		
		public System.Data.Linq.Table<tTag> tTags
		{
			get
			{
				return this.GetTable<tTag>();
			}
		}
		
		public System.Data.Linq.Table<tTaskTag> tTaskTags
		{
			get
			{
				return this.GetTable<tTaskTag>();
			}
		}
		
		public System.Data.Linq.Table<tPriority> tPriorities
		{
			get
			{
				return this.GetTable<tPriority>();
			}
		}
		
		public System.Data.Linq.Table<tState> tStates
		{
			get
			{
				return this.GetTable<tState>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tAssignees")]
	public partial class tAssignee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssigneeId;
		
		private string _Login;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<tTask> _tTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssigneeIdChanging(System.Guid value);
    partial void OnAssigneeIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public tAssignee()
		{
			this._tTasks = new EntitySet<tTask>(new Action<tTask>(this.attach_tTasks), new Action<tTask>(this.detach_tTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssigneeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssigneeId
		{
			get
			{
				return this._AssigneeId;
			}
			set
			{
				if ((this._AssigneeId != value))
				{
					this.OnAssigneeIdChanging(value);
					this.SendPropertyChanging();
					this._AssigneeId = value;
					this.SendPropertyChanged("AssigneeId");
					this.OnAssigneeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tAssignee_tTask", Storage="_tTasks", ThisKey="AssigneeId", OtherKey="AssigneeId")]
		public EntitySet<tTask> tTasks
		{
			get
			{
				return this._tTasks;
			}
			set
			{
				this._tTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tTasks(tTask entity)
		{
			this.SendPropertyChanging();
			entity.tAssignee = this;
		}
		
		private void detach_tTasks(tTask entity)
		{
			this.SendPropertyChanging();
			entity.tAssignee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tTasks")]
	public partial class tTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TaskId;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private string _Title;
		
		private string _Description;
		
		private System.Guid _PriorityId;
		
		private System.Guid _AssigneeId;
		
		private string _Picture;
		
		private System.Guid _StateId;
		
		private EntitySet<tTaskTag> _tTaskTags;
		
		private EntityRef<tAssignee> _tAssignee;
		
		private EntityRef<tPriority> _tPriority;
		
		private EntityRef<tState> _tState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriorityIdChanging(System.Guid value);
    partial void OnPriorityIdChanged();
    partial void OnAssigneeIdChanging(System.Guid value);
    partial void OnAssigneeIdChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnStateIdChanging(System.Guid value);
    partial void OnStateIdChanged();
    #endregion
		
		public tTask()
		{
			this._tTaskTags = new EntitySet<tTaskTag>(new Action<tTaskTag>(this.attach_tTaskTags), new Action<tTaskTag>(this.detach_tTaskTags));
			this._tAssignee = default(EntityRef<tAssignee>);
			this._tPriority = default(EntityRef<tPriority>);
			this._tState = default(EntityRef<tState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PriorityId
		{
			get
			{
				return this._PriorityId;
			}
			set
			{
				if ((this._PriorityId != value))
				{
					if (this._tPriority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriorityIdChanging(value);
					this.SendPropertyChanging();
					this._PriorityId = value;
					this.SendPropertyChanged("PriorityId");
					this.OnPriorityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssigneeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssigneeId
		{
			get
			{
				return this._AssigneeId;
			}
			set
			{
				if ((this._AssigneeId != value))
				{
					if (this._tAssignee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssigneeIdChanging(value);
					this.SendPropertyChanging();
					this._AssigneeId = value;
					this.SendPropertyChanged("AssigneeId");
					this.OnAssigneeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._tState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tTask_tTaskTag", Storage="_tTaskTags", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<tTaskTag> tTaskTags
		{
			get
			{
				return this._tTaskTags;
			}
			set
			{
				this._tTaskTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tAssignee_tTask", Storage="_tAssignee", ThisKey="AssigneeId", OtherKey="AssigneeId", IsForeignKey=true)]
		public tAssignee tAssignee
		{
			get
			{
				return this._tAssignee.Entity;
			}
			set
			{
				tAssignee previousValue = this._tAssignee.Entity;
				if (((previousValue != value) 
							|| (this._tAssignee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tAssignee.Entity = null;
						previousValue.tTasks.Remove(this);
					}
					this._tAssignee.Entity = value;
					if ((value != null))
					{
						value.tTasks.Add(this);
						this._AssigneeId = value.AssigneeId;
					}
					else
					{
						this._AssigneeId = default(System.Guid);
					}
					this.SendPropertyChanged("tAssignee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tPriority_tTask", Storage="_tPriority", ThisKey="PriorityId", OtherKey="PriorityId", IsForeignKey=true)]
		public tPriority tPriority
		{
			get
			{
				return this._tPriority.Entity;
			}
			set
			{
				tPriority previousValue = this._tPriority.Entity;
				if (((previousValue != value) 
							|| (this._tPriority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tPriority.Entity = null;
						previousValue.tTasks.Remove(this);
					}
					this._tPriority.Entity = value;
					if ((value != null))
					{
						value.tTasks.Add(this);
						this._PriorityId = value.PriorityId;
					}
					else
					{
						this._PriorityId = default(System.Guid);
					}
					this.SendPropertyChanged("tPriority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tState_tTask", Storage="_tState", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public tState tState
		{
			get
			{
				return this._tState.Entity;
			}
			set
			{
				tState previousValue = this._tState.Entity;
				if (((previousValue != value) 
							|| (this._tState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tState.Entity = null;
						previousValue.tTasks.Remove(this);
					}
					this._tState.Entity = value;
					if ((value != null))
					{
						value.tTasks.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(System.Guid);
					}
					this.SendPropertyChanged("tState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tTaskTags(tTaskTag entity)
		{
			this.SendPropertyChanging();
			entity.tTask = this;
		}
		
		private void detach_tTaskTags(tTaskTag entity)
		{
			this.SendPropertyChanging();
			entity.tTask = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tTags")]
	public partial class tTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TagId;
		
		private string _Text;
		
		private EntitySet<tTaskTag> _tTaskTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(System.Guid value);
    partial void OnTagIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public tTag()
		{
			this._tTaskTags = new EntitySet<tTaskTag>(new Action<tTaskTag>(this.attach_tTaskTags), new Action<tTaskTag>(this.detach_tTaskTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tTag_tTaskTag", Storage="_tTaskTags", ThisKey="TagId", OtherKey="TagId")]
		public EntitySet<tTaskTag> tTaskTags
		{
			get
			{
				return this._tTaskTags;
			}
			set
			{
				this._tTaskTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tTaskTags(tTaskTag entity)
		{
			this.SendPropertyChanging();
			entity.tTag = this;
		}
		
		private void detach_tTaskTags(tTaskTag entity)
		{
			this.SendPropertyChanging();
			entity.tTag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tTaskTags")]
	public partial class tTaskTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TaskTagId;
		
		private System.Guid _TaskId;
		
		private System.Guid _TagId;
		
		private EntityRef<tTag> _tTag;
		
		private EntityRef<tTask> _tTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskTagIdChanging(System.Guid value);
    partial void OnTaskTagIdChanged();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnTagIdChanging(System.Guid value);
    partial void OnTagIdChanged();
    #endregion
		
		public tTaskTag()
		{
			this._tTag = default(EntityRef<tTag>);
			this._tTask = default(EntityRef<tTask>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskTagId
		{
			get
			{
				return this._TaskTagId;
			}
			set
			{
				if ((this._TaskTagId != value))
				{
					this.OnTaskTagIdChanging(value);
					this.SendPropertyChanging();
					this._TaskTagId = value;
					this.SendPropertyChanged("TaskTagId");
					this.OnTaskTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._tTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._tTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tTag_tTaskTag", Storage="_tTag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true)]
		public tTag tTag
		{
			get
			{
				return this._tTag.Entity;
			}
			set
			{
				tTag previousValue = this._tTag.Entity;
				if (((previousValue != value) 
							|| (this._tTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tTag.Entity = null;
						previousValue.tTaskTags.Remove(this);
					}
					this._tTag.Entity = value;
					if ((value != null))
					{
						value.tTaskTags.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(System.Guid);
					}
					this.SendPropertyChanged("tTag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tTask_tTaskTag", Storage="_tTask", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public tTask tTask
		{
			get
			{
				return this._tTask.Entity;
			}
			set
			{
				tTask previousValue = this._tTask.Entity;
				if (((previousValue != value) 
							|| (this._tTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tTask.Entity = null;
						previousValue.tTaskTags.Remove(this);
					}
					this._tTask.Entity = value;
					if ((value != null))
					{
						value.tTaskTags.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(System.Guid);
					}
					this.SendPropertyChanged("tTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tPriorities")]
	public partial class tPriority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PriorityId;
		
		private string _Text;
		
		private EntitySet<tTask> _tTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriorityIdChanging(System.Guid value);
    partial void OnPriorityIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public tPriority()
		{
			this._tTasks = new EntitySet<tTask>(new Action<tTask>(this.attach_tTasks), new Action<tTask>(this.detach_tTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PriorityId
		{
			get
			{
				return this._PriorityId;
			}
			set
			{
				if ((this._PriorityId != value))
				{
					this.OnPriorityIdChanging(value);
					this.SendPropertyChanging();
					this._PriorityId = value;
					this.SendPropertyChanged("PriorityId");
					this.OnPriorityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tPriority_tTask", Storage="_tTasks", ThisKey="PriorityId", OtherKey="PriorityId")]
		public EntitySet<tTask> tTasks
		{
			get
			{
				return this._tTasks;
			}
			set
			{
				this._tTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tTasks(tTask entity)
		{
			this.SendPropertyChanging();
			entity.tPriority = this;
		}
		
		private void detach_tTasks(tTask entity)
		{
			this.SendPropertyChanging();
			entity.tPriority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tStates")]
	public partial class tState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StateId;
		
		private string _Text;
		
		private EntitySet<tTask> _tTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(System.Guid value);
    partial void OnStateIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public tState()
		{
			this._tTasks = new EntitySet<tTask>(new Action<tTask>(this.attach_tTasks), new Action<tTask>(this.detach_tTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tState_tTask", Storage="_tTasks", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<tTask> tTasks
		{
			get
			{
				return this._tTasks;
			}
			set
			{
				this._tTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tTasks(tTask entity)
		{
			this.SendPropertyChanging();
			entity.tState = this;
		}
		
		private void detach_tTasks(tTask entity)
		{
			this.SendPropertyChanging();
			entity.tState = null;
		}
	}
}
#pragma warning restore 1591
